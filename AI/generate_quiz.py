# -*- coding: utf-8 -*-
"""ASPU_HUB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WkrPWgcD4G5KNRIEoHSjo_KLQYmefP_B
"""

from huggingface_hub import InferenceClient
import os 
import textwrap

key = os.getenv('HF_KEY')
if not key:
    raise ValueError("HF_KEY not found. Please set it via Colab userdata or environment variable.")

# Create an inference client using the Fireworks AI provider and API key
client = InferenceClient(
    provider="fireworks-ai",
    api_key=key,
)

# Available subjects mapping
subjects = {
    "Introduction to Programming in C++": 1
}


# Function to build the system prompt that instructs the AI model how to behave
def get_system_prompt(subject: str) -> str:
    """
    Build the system prompt for the chat model based on the subject.
    """
    raw = f"""
    You are an intelligent assistant and an expert in teaching the {subject}. Your task is to create effective and appropriate exam questions for university students. While creating the questions, follow these guidelines:

    1. Focus on fundamental and core concepts within the designated learning material.
    2. Diversify the question types: code output prediction, multiple choice, and code error correction.
    3. Ensure the questions address concepts that students often struggle with, including edge cases and common mistakes.
    4. Design questions with a gradual difficulty level, ranging from basic to intermediate, and make sure the wording is clear and understandable.
    5. Use realistic examples from practical programming contexts; avoid purely theoretical examples.
    6. Each question must include:
       - A clearly written prompt
       - For multiple choice: a list of answer options
    7. Format the questions with clear structure and appropriate indentation to enhance readability.
    8. Avoid redundancy and ambiguity in the questions.

    Your goal is to help students accurately assess their understanding of C++ through precise, educational, and thought-provoking questions.
    """
    return textwrap.dedent(raw).strip()


# Example subject content: defines the core concepts the model should base questions on
examples = [
    {
        "subject": "Introduction to Programming in C++",
        "subject_content": """
### Core Concepts:

1. **Variables and Data Types**
   - Declaration and initialization
   - Arithmetic operations (`++`, `--`, `+=`)
   - Variable scope

2. **Conditional Structures**
   - Nested if-else statements
   - switch-case with break usage

3. **Loops**
   - for loops with multiple counters
   - Difference between while and do-while
   - Controlling loops using break and continue

4. **Arrays**
   - One-dimensional and two-dimensional arrays
   - Accessing elements
   - Nested initialization
"""
    }
]


# Function to build the user prompt that tells the model what kind of output is needed
def get_user_prompt(subject: str) -> str:
    """
    Build the user prompt for the chat model based on the subject.
    """
    if subject != 'Introduction to Programming in C++':
        raise ValueError(f"No user prompt defined for subject '{subject}'")

    raw = f"""
    You are an expert assistant in evaluating the proficiency of university students in the {subject}.

    Based on the following educational content:
    {examples[0]['subject_content']}

    Create **3 varied assessment questions** that include:
    - One Output Prediction question
    - One Multiple Choice question
    - One Code Correction question

    **Important guidelines for question creation:**
    1. Focus on concepts that are typically difficult or confusing for students.
    2. Try to include edge cases where appropriate.
    3. Use clean and well-indented code formatting.
    5. Use realistic examples from practical programming scenarios.

    **Each question must include the following format:**
    - A short title (e.g., "Question 1: Output Prediction")
    - A clearly written prompt
    - A code block (if applicable)
    - Options (for multiple choice questions)
    """
    return textwrap.dedent(raw).strip()


# Main function to generate exam questions for a given subject
def generate_exam_questions(subject: str) -> str :
      """
      Generate exam questions for a given subject by invoking the HF chat model.
      """
      # Validate subject
      if subject not in subjects:
         raise ValueError(f"Subject '{subject}' is not supported. Available: {list(subjects.keys())}")

      # Build messages
      system_msg = get_system_prompt(subject)
      user_msg = get_user_prompt(subject)

      try:  
        response = client.chat.completions.create(
            model="deepseek-ai/DeepSeek-V3",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=1000,
            temperature=0.3,
            top_p=0.9,
        )
        return response.choices[0].message.content
      
      except Exception as e:
        return f"An error occurred while generating the questions: {str(e)}"


if __name__ == '__main__':
    subject = "Introduction to Programming in C++"
    print(generate_exam_questions(subject))